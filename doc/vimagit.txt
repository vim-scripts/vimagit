*vimagit*    vimagit is an attempt to reproduce the magnificient Magit to vim.

Author:            Jerome Reybert
Plugin Homepage:   <https://github.com/jreybert/vimagit>

===============================================================================

                               _  _ _ _  _ ____ ____ _ ___     .   ~
                               |  | | |\/| |__| | __ |  |    --|-- ~
                                \/  | |  | |  | |__] |  |      '   ~
                                                             ----- ~

===============================================================================
CONTENTS                                                      *vimagit-contents*

  1.  Introduction ................. |vimagit-introduction|
  2.  Installation ................. |vimagit-installation|
  3.  TL;DR ........................ |vimagit-TL;DR|
  4.  Usage ........................ |vimagit-usage|
  5.  Options ...................... |vimagit-options|
  6.  FAQ .......................... |vimagit-FAQ|


===============================================================================
1. INTRODUCTION                                           *vimagit-introduction*

vimagit is a plugin which try to mimic the fantastic magit emacs plugin. If you
already know the original plugin, give it a try. If you never have heard about
magit (or maybe emacs), this is IMO the most efficient way to stage hunks and
craft nice commits.

===============================================================================
2. INSTALLATION                                           *vimagit-installation*

The plugin hierarchy tree respects the vim plugin standard. It is compatible
with pathogen (and most probably vundle).

To install:
>
  cd ~/.vim/bundle
  git clone https://github.com/jreybert/vimagit
<

===============================================================================
3. TL;DR                                                         *vimagit-TL;DR*

This is the minimal required set of command you must know to start playing
with vimagit. See |vimagit-commands| for a complete description.

  :Magit
-----------

Open magit buffer.

  Enter
-----------

All files diffs are hidden by default. To inspect changes in a file, move
cursor to the filename line, and press 'Enter' in Normal mode. Diffs are
displayed below the file name.

  S
-----------

* Modify a file, for example foo.c, in your repository.
* Move the cursor the line 'modified: foo.c' in "Unstage changes" section,
  press S in Normal mode: the file is stage, and appears in "Stage changes"
  section.
* Move to the line 'modified: foo.c' in "Stage changes" section, press S in
  Normal mode: the file is unstage, and appears in "Unstaged changes" section.

More about S:

* It works exactely the same for new/renamed/deleted files.
* Stage/unstage by hunk is easy: display file diffs with Enter. If
  diffs are composed of multiple hnuks, move the cursor to a hunk, and press
  'S' to stage/unstage this hunk.

  CC
-----------

Once you have stage all the required changes, press CC. A new section
"Commit message" appears and cursor move to it. Type your commit message, in
Insert mode this time. Once it's done, go back in Normal mode, and CC: you
created your first commit with vimagit!

===============================================================================
4. USAGE                                                         *vimagit-usage*

SECTIONS                                                      *vimagit-sections*

IMPORTANT: mappings can have different meanings regarding the cursor position.

There are 5 sections:
* Info: this section display some information about the git repository, like
  the current branch and the HEAD commit.
* Commit message: this section appears in commit mode (see below). It contains
  the message to be commited.
* Staged changes: this sections contains all staged files/hunks, ready to
  commit.
* Unstaged changes: this section contains all unstaged and untracked
  files/hunks.
* Stash list: this section contains all stahes.

INLINE MODIFICATIONS                               *vimagit-inline-modification*

* It is possible to modify the content to be staged or unstaged in magit
  buffer, with some limitations:
  * only lines starting with a + sign can be modified
  * no line can be deleted


COMMANDS                                                      *vimagit-commands*

                                        *:Magit*           *magit#show_magit('v')*
  :Magit    open magit buffer


MAPPINGS                                                      *vimagit-mappings*

For each mapping, user can redefine the behavior with its own mapping. Each
variable is described below as           *vimagit-g:magit_nameofmapping_mapping*

For example, to redefine the <leader>M mapping, user should add this line in
its |vimrc|:
let g:magit_show_magit_mapping='itsnewmapping'

Global mappings
---------------
Following mappings are broadly set, and are applied in all vim buffers.

                                      *vimagit-<leader>M*  *magit#show_magit('v')*
                                      *vimagit-g:magit_show_magit_mapping*
 <leader>M  Open Magit buffer

Local mappings
--------------
Following mappings are set locally, for magit buffer only, in normal mode.

                                      *vimagit-<CR>*  *magit#open_close_folding()*
                                      *vimagit-g:magit_folding_toggle_mapping*
  <CR>      All file diffs are hidden by default. To see the changes in a
            file, move cursor to the filename line, and press Enter. You can
            close the changes display retyping Enter.

                                      *vimagit-zo*   *magit#open_close_folding(1)*
                                      *vimagit-g:magit_folding_open_mapping*
  zo,zO     Typing zo on a file will unhide its diffs.

                                      *vimagit-zo*   *magit#open_close_folding(0)*
                                      *vimagit-g:magit_folding_close_mapping*
  zc,zC     Typing zc on a file will hide its diffs.

                                      *vimagit-S*             *magit#stage_hunk()*
                                      *vimagit-g:magit_stage_hunk_mapping*
  S         If cursor is in a hunk, stage/unstage hunk at cursor position.
            If cursor is in diff header, stage/unstage whole file at cursor
            position.
            When cursor is in "Unstaged changes" section, it will stage the
            hunk/file.
            On the other side, when cursor is in "Staged changes" section, it
            will unstage hunk/file.

                                      *vimagit-F*             *magit#stage_file()*
                                      *vimagit-g:magit_stage_file_mapping*
  F         Stage/unstage the whole file at cursor position.
            When cursor is in "Unstaged changes" section, it will stage the
            file.
            On the other side, when cursor is in "Staged changes" section, it
            will unstage file.


                                    *vimagit-DDD*           *magit#discard_hunk()*
                                    *vimagit-g:magit_discard_hunk_mapping*
  DDD       If cursor is in a hunk, discard hunk at cursor position.
            If cursor is in diff header, discard whole file at cursor
            position.
            Only works in "Unstaged changes" section.

                                    *vimagit-CC*      *magit#commit_command('CC')*
                                    *vimagit-g:magit_commit_mapping*
  CC        If not in commit section, set commit mode to "New commit" and show 
           "Commit message" section with brand new commit message.
            If in commit section, commit the all staged changes in commit mode
            previously set.

                                    *vimagit-:w<CR>*  *magit#commit_command('CC')*
                                    *vimagit-g:magit_commit_mapping_command*
  :w<CR>    If in commit section, commit the all staged changes in commit mode
            previously set.

                                    *vimagit-CA*     *magit#commit_command('CA')*
                                    *vimagit-g:magit_commit_amend_mapping*
  CA        If not in commit section, set commit mode to "Amend commit" and
            show "Commit message" section with previous commit message.
            If in commit section, commit the staged changes in commit mode
            previously set.

                                    *vimagit-CF*     *magit#commit_command('CF')*
                                    *vimagit-g:magit_commit_fixup_mapping*
  CF        Amend the staged changes into the previous commit, without
            modifying previous commit message

                                    *vimagit-I*            *magit#ignore_file()*
                                    *vimagit-g:magit_ignore_mapping*
  I         Add the file under the cursor in .gitgnore

                                    *vimagit-R*          *magit#update_buffer()*
                                    *vimagit-g:magit_reload_mapping*
  R         Refresh magit buffer.

                                    *vimagit-q*
                                    *vimagit-g:magit_close_mapping*
  q         close magit buffer.

                                    *vimagit-h*            *magit#toggle_help()*
                                    *vimagit-g:magit_toggle_help_mapping*
  h         Toggle help showing in magit buffer


===============================================================================
5. OPTIONS                                                     *vimagit-options*

User can define in its prefered |vimrc| some options.

                                                       *vimagit-g:magit_enabled*
To disable vimagit plugin
let g:magit_enabled=0

                                                     *vimagit-g:magit_show_help*
To disable chatty inline help in magit buffer
let g:magit_show_help=0

===============================================================================
6. FAQ                                                             *vimagit-FAQ*

